--- a/modules/nixos/main.py	2024-11-04 22:09:23.546683203 +0100
+++ b/modules/nixos/main.py	2024-11-05 14:02:48.304651419 +0100
@@ -12,6 +12,7 @@
 import os
 import subprocess
 import re
+import tempfile
 
 import gettext
 
@@ -36,20 +37,24 @@
   imports =
     [ # Include the results of the hardware scan.
       ./hardware-configuration.nix
+      ./glf.nix
     ];
 
 """
 cfgbootefi = """  # Bootloader.
-  boot.loader.systemd-boot.enable = true;
-  boot.loader.efi.canTouchEfiVariables = true;
+  boot.loader = {
+    systemd-boot.enable      = true;
+    efi.canTouchEfiVariables = true;
+  };
 
 """
 
 cfgbootbios = """  # Bootloader.
-  boot.loader.grub.enable = true;
-  boot.loader.grub.device = "@@bootdev@@";
-  boot.loader.grub.useOSProber = true;
-
+  boot.loader.grub = {
+      enable      = true;
+      device      = "@@bootdev@@";
+      useOSProber = true;
+  };
 """
 
 cfgbootnone = """  # Disable bootloader.
@@ -115,12 +120,12 @@
 """
 
 cfggnome = """  # Enable the X11 windowing system.
-  services.xserver.enable = true;
-
   # Enable the GNOME Desktop Environment.
-  services.xserver.displayManager.gdm.enable = true;
-  services.xserver.desktopManager.gnome.enable = true;
-
+  services.xserver = {
+    enable = true;
+    displayManager.gdm.enable   = true;
+    desktopManager.gnome.enable = true;
+  };
 """
 
 cfgplasma5 = """  # Enable the X11 windowing system.
@@ -806,6 +811,50 @@
     # Write the configuration.nix file
     libcalamares.utils.host_env_process_output(["cp", "/dev/stdin", config], None, cfg)
 
+    # Copying user provided configurations
+    dynamic_config = "/tmp/nix-cfg/configuration.nix" # Generated by calamares
+    iso_config = "/iso/nix-cfg/configuration.nix"     # From glf (used for condition)
+    glf_module = "/iso/nix-cfg/glf.nix"               # GLF Module
+    hw_cfg_dest = os.path.join(root_mount_point, "etc/nixos/hardware-configuration.nix")
+    hw_modified = False
+
+    try:
+        with open(hw_cfg_dest, "r") as hf:
+            hw_cfg = hf.read()
+
+        if os.path.exists(dynamic_config):
+            src_dir = "/tmp/nix-cfg/"
+            dest_dir = os.path.join(root_mount_point, "etc/nixos/")
+            for file in os.listdir(src_dir):
+                src_file = os.path.join(src_dir, file)
+                dest_file = os.path.join(dest_dir, file)
+                if os.path.isdir(src_file):
+                    subprocess.run(["sudo", "cp", "-r", src_file, dest_file], check=True)
+                else:
+                    subprocess.run(["sudo", "cp", src_file, dest_file], check=True)
+            hw_modified = True
+
+        elif os.path.exists(iso_config):
+            src_file = glf_module
+            dest_file = os.path.join(root_mount_point, "etc/nixos/")
+            subprocess.run(["sudo", "cp", src_file, dest_file], check=True)
+            hw_modified = True
+                
+        temp_filepath = ""
+        if hw_modified:
+            # Restore generated hardware-configuration
+            with tempfile.NamedTemporaryFile(mode="w", delete=False) as temp_file:
+                temp_file.write(hw_cfg)
+                temp_filepath = temp_file.name
+            subprocess.run(["sudo", "mv", temp_filepath, hw_cfg_dest], check=True)
+
+    except subprocess.CalledProcessError as e:
+        return ("Installation failed to copy configuration files", str(e))
+
+    finally:
+        if os.path.exists(temp_filepath):
+            os.remove(temp_filepath)
+
     status = _("Installing NixOS")
     libcalamares.job.setprogress(0.3)
